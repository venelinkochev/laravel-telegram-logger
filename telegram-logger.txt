Here's how to create a custom Telegram Logger for Laravel errors:
First, create the TelegramLogger class:

<?php

namespace App\Notifications;

use Illuminate\Support\Facades\Http;
use Monolog\Logger;
use Monolog\Handler\AbstractProcessingHandler;
use Throwable;

class TelegramLogger extends AbstractProcessingHandler
{
    protected string $botToken;
    protected string $chatId;
    protected string $appName;
    protected string $environment;

    public function __construct($level = Logger::ERROR)
    {
        parent::__construct($level);
        
        $this->botToken = config('services.telegram.error_bot_token');
        $this->chatId = config('services.telegram.error_chat_id');
        $this->appName = config('app.name');
        $this->environment = config('app.env');
    }

    protected function write(array $record): void
    {
        if (!$this->botToken || !$this->chatId) {
            return;
        }

        try {
            $content = $this->formatMessage($record);
            
            Http::post("https://api.telegram.org/bot{$this->botToken}/sendMessage", [
                'chat_id' => $this->chatId,
                'text' => $content,
                'parse_mode' => 'HTML',
                'disable_web_page_preview' => true
            ]);
        } catch (Throwable $e) {
            // Silently fail to prevent recursive logging
        }
    }

    protected function formatMessage(array $record): string
    {
        $emoji = $this->getEmoji($record['level_name']);
        
        $message = "<b>{$emoji} {$this->appName} Error ({$this->environment})</b>\n\n";
        
        // Add timestamp
        $message .= "<b>🕒 Time:</b> " . now()->format('Y-m-d H:i:s') . "\n";
        
        // Add error level
        $message .= "<b>📊 Level:</b> {$record['level_name']}\n";
        
        // Add error message
        $message .= "<b>❌ Message:</b>\n{$record['message']}\n";

        // Add context if available
        if (!empty($record['context'])) {
            $message .= "\n<b>📝 Context:</b>\n";
            foreach ($record['context'] as $key => $value) {
                if ($key === 'exception' && $value instanceof Throwable) {
                    $message .= $this->formatException($value);
                    continue;
                }
                $message .= "<b>{$key}:</b> " . $this->formatValue($value) . "\n";
            }
        }

        // Add server info
        $message .= "\n<b>🖥️ Server Info:</b>\n";
        $message .= "IP: " . request()->server('SERVER_ADDR', 'N/A') . "\n";
        $message .= "URL: " . request()->fullUrl() . "\n";
        $message .= "Method: " . request()->method() . "\n";

        // Truncate if too long for Telegram
        return mb_substr($message, 0, 4096);
    }

    protected function formatException(Throwable $exception): string
    {
        $message = "\n<b>Exception:</b>\n";
        $message .= "Type: " . get_class($exception) . "\n";
        $message .= "Message: " . $exception->getMessage() . "\n";
        $message .= "File: " . $exception->getFile() . ":" . $exception->getLine() . "\n";
        
        // Add stack trace (limited to 3 frames)
        $trace = array_slice($exception->getTrace(), 0, 3);
        if (!empty($trace)) {
            $message .= "\nStack Trace (latest 3 calls):\n";
            foreach ($trace as $frame) {
                $message .= isset($frame['file']) 
                    ? "• " . basename($frame['file']) . ":" . ($frame['line'] ?? '?') . "\n"
                    : "• [internal function]\n";
            }
        }
        
        return $message;
    }

    protected function formatValue($value): string
    {
        if (is_array($value)) {
            return json_encode($value, JSON_PRETTY_PRINT);
        }
        if (is_object($value)) {
            return get_class($value);
        }
        if (is_bool($value)) {
            return $value ? 'true' : 'false';
        }
        if (is_null($value)) {
            return 'null';
        }
        return (string) $value;
    }

    protected function getEmoji(string $level): string
    {
        return match ($level) {
            'EMERGENCY' => '🚨',
            'ALERT'     => '⚠️',
            'CRITICAL'  => '🔴',
            'ERROR'     => '❌',
            'WARNING'   => '⚡',
            'NOTICE'    => '📢',
            'INFO'      => 'ℹ️',
            'DEBUG'     => '🐛',
            default     => '❓'
        };
    }
}




2. Update your config file services.php
'telegram' => [
    'bot_token' => env('TELEGRAM_BOT_TOKEN'),
    'chat_id' => env('TELEGRAM_CHAT_ID'),
    // Add these new keys for error logging
    'error_bot_token' => env('TELEGRAM_ERROR_BOT_TOKEN'),
    'error_chat_id' => env('TELEGRAM_ERROR_CHAT_ID'),
],


3. Update your .env file:

TELEGRAM_ERROR_BOT_TOKEN=your_error_bot_token
TELEGRAM_ERROR_CHAT_ID=your_error_chat_id


4. Register the custom logger in your logging configuration:
logging.php
'channels' => [
    // ... other channels ...

    'telegram' => [
        'driver' => 'monolog',
        'level' => env('LOG_LEVEL', 'error'),
        'handler' => App\Notifications\TelegramLogger::class,
    ],

    'stack' => [
        'driver' => 'stack',
        'channels' => ['single', 'telegram'], // Add telegram to the stack
        'ignore_exceptions' => false,
    ],
],

Now you can test it:

Log::error('Test error message', ['custom_data' => 'test']);



The logger will send a formatted message to Telegram that looks like:

🚨 Pingify Error (production)

🕒 Time: 2024-01-20 15:30:45
📊 Level: ERROR
❌ Message:
Test error message

📝 Context:
custom_data: test

🖥️ Server Info:
IP: 1.2.3.4
URL: https://pingify.com/dashboard
Method: GET


Features:
Formatted messages with emojis
Environment indication
Timestamp
Error level
Full error message
Context data
Exception details with stack trace
Server information
Request details
Message truncation for Telegram limits
Silent failure to prevent loops
Different emojis for different log levels
HTML formatting for better readability
Configurable through env variables
Stack trace limiting to prevent huge messages
Request method and URL logging
Server IP address


To use it for specific errors

try {
    // Your code
} catch (\Exception $e) {
    Log::channel('telegram')->error('Custom error message', [
        'exception' => $e,
        'custom_data' => 'any additional context'
    ]);
}


